#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;



int main()
{
   int test;
   cin >> test;
   while(test--){
       unordered_map<int,int> ladders;
       int lad_count;
       cin >> lad_count;
       for(int i=0;i<lad_count;i++){
           int start,end;
           cin >> start >>end;
           ladders[start]=end;
       }

       vector<int> grid(101,20);
       grid[1]=0;
      

       for(int i=2;i<=10;i++){
           if(i<=7)
                grid[i]=1;
            else if(i>=8 && i<=10)
                grid[i]=2;

            if(ladders.find(i)!=ladders.end()){
                grid[ladders[i]]=grid[i];
            }
    }

       unordered_map<int,int>snakes;
       int snake_count;
        cin >> snake_count;
        while(snake_count--){
            int start,end;
            cin >> start >> end;
            snakes[start]=end;
        }



        //solution
        for(int i=11;i<=100;i++){
           
            int mini=20;

            for(int j=i-6;j<i;j++){
                if( grid[j]<mini)
                    mini=grid[j];}

            grid[i]=min(grid[i],mini+1);

             if(ladders.find(i)!=ladders.end()){
                if(grid[ladders[i]]>grid[i])
                    grid[ladders[i]]=grid[i];
            }
            if(snakes.find(i)!=snakes.end()){
                if(grid[snakes[i]]>grid[i]){
                    grid[snakes[i]]=grid[i];
                }
                grid[i]=20;
            }

    }


    for(int i=11;i<=100;i++){
           if(snakes.find(i)!=snakes.end()) continue;
           
            int mini=20;

            for(int j=i-6;j<i;j++){
                if( grid[j]<mini)
                    mini=grid[j];}

            grid[i]=min(grid[i],mini+1);

             if(ladders.find(i)!=ladders.end()){
                if(grid[ladders[i]]>grid[i])
                    grid[ladders[i]]=grid[i];
             }            
            }

      /* int k=0;
       for(int i=1;i<=10;i++){
            for(int j=1;j<=10;j++){
               cout <<grid[++k]<<"  ";
            }
            cout<<endl;
        }*/
        if(grid[100]==20)
            cout <<  -1 <<endl;
        else cout << grid[100] <<endl;
   }
   

    return 0;
}
